#!/bin/bash

function getvalue {
    local VALUE="$(./scripts/getparam.py ./config/parameters.csv $1 in out)"
    echo "$VALUE"
}


function status {
    journalctl -u "$1".service | tail -n 100;
    echo "Continue"
    read
}

function restart {
    echo "Restarting $1"
    sudo systemctl restart "$1"
    echo "Continue..."
    read;
}

function start {
    echo "starting $1"
    sudo systemctl start "$1"
    echo "Continue..."
    read;
}

function stop {
    echo "Stopping $1"
    sudo systemctl stop "$1";
    echo "Continue.."
    read
}


function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

        return $selected
    }
    ##################################################################################
    ##################################################################################
    ##################################################################################
    ##################################################################################
    #######################START EDITING BELOW########################################
    ##################################################################################
    ##################################################################################
    ##################################################################################
    ##################################################################################

## 4
function backup {
	echo "Creating archive of 'public' and 'private' folders"
	tar -cfv /home/"$ServerUserName"/webapp_data.tar /home/"$ServerUserName"/WebApp/public /home/"$ServerUserName"/WebApp/private
	echo "Continue";
	read
}

## 5 
function restore {
	echo "Restoring data"
	tar -xvf /home/"$ServerUserName"/webapp_data.tar /home/"$ServerUserName"/WebApp/
	echo "Continue";
	read
}

## 6
function reload {
    echo "calling reload script from $webappPath"
    cd "$webappPath"
    "$webappPath"/load.sh -l -w -c
    sudo chown "$ServerUserName":"$ServerUserName" "$webappPath"/*
    sudo chmod a+xw "$webappPath"/load.sh
    echo "Continue ...";
    read
}

## 7
function devStart {
    cd "$webappPath"
    sudo -u "$ServerUserName" ./load.sh -d
    echo "Continue ...";
    read
}

webappPath=$(getvalue {webapp_path})
ServerUserName=$(getvalue {user_name})
CONFIGFILE=$(getvalue {vsftpd_config_path})

function prompt {
    
    clear
    echo "Working in: `pwd`"
    echo "_______________________________________________________________"
    echo "Select one option using up/down keys and enter to confirm:"
    echo

    options=("0) Status"  \
            "1) Start"    \
            "2) Stop"     \
            "3) Restart"  \
            "4) Backup" \
            "5) Restore" \
            "6) Reload"\
            "7) Dev start"\
            "8) exit")

    select_option "${options[@]}"
    choice=$?

    case $choice in
        0) status webapp;;
        1) start webapp;;
        2) stop webapp;;
        3) restart webapp;;
        4) backup ;;
        5) restore;;
        6) reload ;;
        7) devStart;;
        8) return 1;;
        *) echo 
    esac
    return 0
    clear
}

while prompt
do
    echo
done
clear
